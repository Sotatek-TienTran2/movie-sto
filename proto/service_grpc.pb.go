// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: proto/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AddAuthorServiceClient is the client API for AddAuthorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddAuthorServiceClient interface {
	FindMovieByIdAuthor(ctx context.Context, in *FindMovieByIdAuthorRequest, opts ...grpc.CallOption) (*MoviesResponse, error)
	LoginGPRC(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
}

type addAuthorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAddAuthorServiceClient(cc grpc.ClientConnInterface) AddAuthorServiceClient {
	return &addAuthorServiceClient{cc}
}

func (c *addAuthorServiceClient) FindMovieByIdAuthor(ctx context.Context, in *FindMovieByIdAuthorRequest, opts ...grpc.CallOption) (*MoviesResponse, error) {
	out := new(MoviesResponse)
	err := c.cc.Invoke(ctx, "/proto.AddAuthorService/FindMovieByIdAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addAuthorServiceClient) LoginGPRC(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/proto.AddAuthorService/LoginGPRC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addAuthorServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, "/proto.AddAuthorService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddAuthorServiceServer is the server API for AddAuthorService service.
// All implementations must embed UnimplementedAddAuthorServiceServer
// for forward compatibility
type AddAuthorServiceServer interface {
	FindMovieByIdAuthor(context.Context, *FindMovieByIdAuthorRequest) (*MoviesResponse, error)
	LoginGPRC(context.Context, *LoginRequest) (*LoginResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
}

// UnimplementedAddAuthorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAddAuthorServiceServer struct {
}

func (UnimplementedAddAuthorServiceServer) FindMovieByIdAuthor(context.Context, *FindMovieByIdAuthorRequest) (*MoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMovieByIdAuthor not implemented")
}
func (UnimplementedAddAuthorServiceServer) LoginGPRC(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginGPRC not implemented")
}
func (UnimplementedAddAuthorServiceServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAddAuthorServiceServer) mustEmbedUnimplementedAddAuthorServiceServer() {}

// UnsafeAddAuthorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddAuthorServiceServer will
// result in compilation errors.
type UnsafeAddAuthorServiceServer interface {
	mustEmbedUnimplementedAddAuthorServiceServer()
}

func RegisterAddAuthorServiceServer(s grpc.ServiceRegistrar, srv AddAuthorServiceServer) {
	s.RegisterService(&AddAuthorService_ServiceDesc, srv)
}

func _AddAuthorService_FindMovieByIdAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMovieByIdAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddAuthorServiceServer).FindMovieByIdAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AddAuthorService/FindMovieByIdAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddAuthorServiceServer).FindMovieByIdAuthor(ctx, req.(*FindMovieByIdAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddAuthorService_LoginGPRC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddAuthorServiceServer).LoginGPRC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AddAuthorService/LoginGPRC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddAuthorServiceServer).LoginGPRC(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddAuthorService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddAuthorServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AddAuthorService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddAuthorServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AddAuthorService_ServiceDesc is the grpc.ServiceDesc for AddAuthorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddAuthorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AddAuthorService",
	HandlerType: (*AddAuthorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindMovieByIdAuthor",
			Handler:    _AddAuthorService_FindMovieByIdAuthor_Handler,
		},
		{
			MethodName: "LoginGPRC",
			Handler:    _AddAuthorService_LoginGPRC_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _AddAuthorService_Logout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
